#!/usr/bin/env python2
# Equation Beautifier
# Arun Chaganty <arunchaganty@gmail.com>
# Replaces [],() with \left( \right), etc. in math modes
#

import re
import sys

mode = { 
#"single" : False, # $
"double" : False, # $$
"eqnarray" : False,
"IEEE" : False,
}

rgx = {
#"single" : re.compile(r"\$[^$]"),
"double" : re.compile(r"\$\$"),
"eqnarray" : re.compile(r"\\(begin|end){eqnarray\*?}"),
"IEEE" : re.compile(r"\\(begin|end){IEEEeqnarray\*?}"),
"input" : re.compile(r"\\input{([^}]*)}")
}

replacements = {
"(": r"\left(",
"[": r"\left[",
")": r"\right)",
"]": r"\right]",
}

def transform( in_str ):
    for k,v in replacements.items():
        in_str = in_str.replace(k,v)
    return in_str

def printChunk( in_str, mode, start, end ):
    chunk = in_str[start:end]
    if mode:
        # Apply transformations
        chunk = transform( chunk )

    sys.stdout.write( "%s"%( chunk ) )

def parseTeX( in_str ):
    """Parse TeX"""
    global mode

    start = 0
    # Check for math mode markers - else just print the string
    # BUG: Only one marker per line
    for marker in rgx.keys():
        if rgx[marker].findall( in_str ):
            if marker == "input":
                fs = rgx[marker].findall( in_str )
                for f in fs:
                    f = f.strip() + ".tex"
                    sys.stderr.write( "Parsing dependent file %s\n"%( f ) )
                    contents = open( f ).read()
                    parseTeX( contents )
                break
            else:
                for m in rgx[marker].finditer( in_str ):
                    # Keep printing and toggling.
                    printChunk( in_str, mode[marker], start, m.end()-1 )
                    mode[marker] = not mode[marker]
                    start = m.end()-1
                printChunk( in_str, mode[marker], start, len(in_str))
                break
    else:
        for marker in mode.keys():
            if mode[marker]:
                printChunk( in_str, mode[marker], start, len(in_str))
                break
        else:
            sys.stdout.write( "%s"%(in_str) )

if __name__ == "__main__":

    try:
        while True:
            in_str = raw_input()
            parseTeX(in_str)
            sys.stdout.write("\n")
    except EOFError:
        pass

